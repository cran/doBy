\documentclass[11pt]{article}
\usepackage{inputenc,hyperref,a4,color,boxedminipage,Sweave}
%\VignetteIndexEntry{doBy}
%\VignettePackage{doBy}
%\VignetteDepends{}

\title{Introduction to the \texttt{doBy} package}
\author{Søren Højsgaard}
\begin{document}
\maketitle
\tableofcontents

\renewenvironment{Schunk}{\begin{center}
    \scriptsize
    \begin{boxedminipage}{0.95\textwidth}}{
    \end{boxedminipage}\end{center}}


\def\proglang#1{{#1}}
\def\pkg#1{{#1}}
\def\doby{\pkg{doBy}}
\def\code#1{\texttt{#1}}
\def\shd#1{\footnote{SHD: #1}}
\def\summaryby{\code{summaryBy}}

@ 
<<echo=FALSE>>=
oopt <- options()
options("digits"=4)
options("width"=80)
@ %def 



\section{Introduction} 
\label{sec:introduction}

The \doby{} package grew out of a need to calculate groupwise summary
statistics in a simple way, much in the spirit of \code{PROC SUMMARY}
of the \proglang{SAS} system.

@ 
<<>>=
library(doBy)
@ %def 


\section{Data}


\subsection{CO2 data} 
\label{sec:co2data}

The \code{CO2} data frame has 84 rows and 5 columns of data from an
experiment on the cold tolerance of the grass species {\em Echinochloa
crus-galli}.  
To limit the amount of output we modify names and levels of variables
as follows
@ 
<<>>=
data(CO2)
CO2 <- transform(CO2, Treat=Treatment, Treatment=NULL)
levels(CO2$Treat) <- c("nchil","chil")
levels(CO2$Type)  <- c("Que","Mis")
CO2 <- subset(CO2, Plant %in% c("Qn1", "Qc1", "Mn1", "Mc1"))
@ %def 
whereby the data becomes
@ 
<<>>=
CO2
@ %def 


\subsection{Airquality data} 

The \code{airquality}
dataset contains  air quality measurements in New York, May to
September 1973. The months are coded as $5,\dots,9$.  
To limit the output we only consider data for two months:
@ 
<<echo=FALSE, results=hide>>=
aq <- subset(airquality, Month %in% c(5,6))
head(aq)
@ %def 


\section{The \code{summaryBy} function}
\label{sec:summaryBy}

The \summaryby function is used for calculating quantities like
``the mean and variance of $x$ and $y$ for
each combination of two factors $A$ and $B$''. 


\begin{description}
\item[Basic usage:] 

For example, the mean, median and variance of \code{uptake} and
\code{conc} for each value of \code{Plant} is obtained by:
@ 
<<>>=
summaryBy(conc+uptake~Plant, data=CO2,
FUN=function(x){c(m=mean(x), v=var(x))})
@ %def 
Alternatively,
@ 
<<>>=
myfun <- function(x){c(m=mean(x), v=var(x))} 
summaryBy(conc+uptake~Plant, data=CO2,
FUN=myfun)
@ %def 

Defining the function to return named values as above is the
recommended use of \summaryby. 
If the result of the function(s) are not named, then the names in the
output data in general become less intuitive:
@ 
<<>>=
summaryBy(conc+uptake~Plant, data=CO2,
FUN=function(x){c(mean(x), var(x))})
myfun <- function(x){c(mean(x), var(x))} 
summaryBy(conc+uptake~Plant, data=CO2,
FUN=myfun)
@ %def 


\item[Using a list of functions:] 
It is possible to apply a list of functions (but note the difference
in naming the output variables depending on whether the output of the
functions are named or not):
@ 
<<>>=
mymed <- function(x)c(med=median(x))
foo  <- function(x)c(median(x))
summaryBy(uptake~Plant, data=CO2,
FUN=c(mean,var,mymed,foo))
@ %def 



\item[Copying variables out with the \code{id} argument:] 
To get the value of the \code{Type} and \code{Treat} in the first row of the
groups (defined by the values of \code{Plant}) copied to the output
dataframe we use the \code{id} argument:
as:
@ 
<<>>=
summaryBy(conc+uptake~Plant, data=CO2,
FUN=function(x){c(m=mean(x),med=median(x), v=var(x))},
id=~Type+Treat)
@ %def 


\item[Statistics on functions of data:] 
We may want to calculate the mean and variance for the logarithm of
\code{uptake}, for \code{uptake}+\code{conc} (not likely to be a
useful statistic) as well as for \code{uptake} and
\code{conc}. This can be achieved as
@ 
<<results=hide>>=
summaryBy(log(uptake)+I(conc+uptake)+ conc+uptake~Plant, data=CO2,
FUN=function(x){c(m=mean(x), v=var(x))})
@ %def 


\item[The dot (".") on the left hand side of a formula:] 
However it is simpler to use the dot (".") on the left hand side of
the formula. The dot means ``all numerical variables which do not
appear elsewhere'' (i.e.\ on the right hand side of the formula and in
the \code{id} statement): 
@ 
<<>>=
summaryBy(log(uptake)+I(conc+uptake)+. ~Plant, data=CO2,
FUN=function(x){c(m=mean(x), v=var(x))})
@ %def 

\item[The dot (".") on the right hand side of a formula:] 
The dot (".") can also be used on the right hand side of the formula
where it refers to ``all non--numerical variables which are not
specified elsewhere'':
@ 
<<>>=
summaryBy(log(uptake) ~Plant+., data=CO2,
FUN=function(x){c(m=mean(x), v=var(x))})
@ %def 


\item[Using ``1'' on the right hand side of the formula:] Using 1 on the
  right hand side means no grouping:
@ 
<<>>=
summaryBy(log(uptake) ~ 1, data=CO2,
FUN=function(x){c(m=mean(x), v=var(x))})
@ %def 


\item[Preserving names of variables:] 
If the function applied to data only returns one value, it is possible
to force that the summary variables retain the original names by
setting \code{keep.names=TRUE}. A
typical use of this could be
@ 
<<>>=
summaryBy(conc+uptake+log(uptake)~Plant, 
data=CO2, FUN=mean, id=~Type+Treat, keep.names=TRUE)
@ %def 
\end{description}



\section{The \code{orderBy} function} 
\label{orderBy}

Ordering (or sorting) a data frame is possible with the \code{orderBy}
function. 
Suppose we want to order the rows of the the \code{airquality} data by \code{Temp} and by
\code{Month} (within \code{Temp}) and that the ordering should be
decreasing. This can be achieved by:
@ 
<<results=hide>>=
x<-orderBy(~Temp+Month, data=aq,decreasing=T)
@ %def 
The first lines of the result are:
@ 
<<echo=TRUE>>=
head(x)
@ %def  

\section{The \code{splitBy} function} 
\label{splitBy}

Suppose we want to split the \code{airquality} data into a list of dataframes, e.g.\ one
dataframe for each month. This can be achieved by:
@ 
<<results=hide>>=
x<-splitBy(~Month, data=aq)
@ %def 

Information about the grouping is stored as a dataframe 
in an attribute called \code{groupid}:
<<>>=
attr(x,"groupid")
@ %def 


\section{The \code{sampleBy} function} 
\label{sampleBy}

Suppose we want a random sample of 50 \% of the observations from a
dataframe. This can be achieved with:
@ 
<<results=hide>>=
sampleBy(~1, frac=0.5, data=aq)
@ %def 

Suppose instead that we want a  systematic sample of  every fifth
observation within each month. This is achieved with:
@ 
<<results=hide>>=
sampleBy(~Month, frac=0.2, data=aq,systematic=T)
@ %def 


\section{The \code{subsetBy} function} 
\label{subsetBy}

Suppose we want to take out those rows within each month for which the the
wind speed is larger than the mean wind speed (within the month). This
is achieved by:
@ 
<<results=hide>>=
subsetBy(~Month, subset='Wind>mean(Wind)', data=airquality)
@ %def 
Note that the statement \code{"Wind>mean(Wind)"} is evaluated within
each month.



\section{The \code{transformBy} function} 
\label{sec:transformby}

The \code{transformBy} function is analogous to the \code{transform}
function except that it works within groups. For example:
@ 
<<results=hide>>=
transformBy(~Month, data=airquality, minW=min(Wind), maxW=max(Wind), 
    chg=sum(range(Wind)*c(-1,1)))
@ %def 





\section{The \code{esticon} function} 
\label{esticon}

Consider a linear model which explains \code{Ozone} as a linear
function of \code{Month} and \code{Wind}:
@ 
<<>>=
airquality <- transform(airquality, Month=factor(Month))
m<-lm(Ozone~Month*Wind, data=airquality)
coefficients(m)
@ %def 

When a parameter vector $\beta$ of (systematic) effects have been
estimated, interest is often in a particular estimable function, i.e.\
linear combination $\lambda^\top \beta$ and/or testing the hypothesis 
$H_0: \lambda^\top \beta=\beta_0$ where $\lambda$ is a specific vector
defined by the user.

Suppose for example we want to calculate the expected difference in
ozone between consequtive months at wind speed 10 mph (which is about
the average wind speed over the whole period).

The \code{esticon} function provides a way of doing so. 
 We can specify several $\lambda$ vectors at the same time. For example
@ 
<<echo=FALSE>>=
Lambda <- rbind(
  c(0,-1,0,0,0,0,-10,0,0,0),
  c(0,1,-1,0,0,0,10,-10,0,0),
  c(0,0,1,-1,0,0,0,10,-10,0),
  c(0,0,0,1,-1,0,0,0,10,-10)
  )
@ %def 

@ 
<<>>=
Lambda
esticon(m, Lambda
)
@ %def 

In other cases, interest is in testing a hypothesis of a contrast
$H_0: \Lambda \beta=\beta_0$ where $\Lambda$ is a matrix. For example
a test of no interaction between \code{Month} and \code{Wind} can be
made by testing jointly that the last four parameters in \code{m} are
zero (observe that the test is a Wald test): 
@ 
<<echo=FALSE>>=
Lambda <- rbind(
  c(0,0,0,0,0,0,1,0,0,0),
  c(0,0,0,0,0,0,0,1,0,0),
  c(0,0,0,0,0,0,0,0,1,0),
  c(0,0,0,0,0,0,0,0,0,1)
  )
@ %def 

@ 
<<>>=
Lambda
esticon(m, Lambda, joint.test=T)
@ %def 

For a linear normal model, one would typically prefer to do a
likelihood ratio test instead. However, for generalized estimating
equations of glm--type (as dealt with in the packages \pkg{geepack}
and \pkg{gee}) there is no likelihood. In this case \code{esticon}
function provides an operational alternative.

Observe that another function for calculating contrasts as above is the
\code{contrast} function in the \pkg{Design} package but it applies to
a narrower range of models than \code{esticon} does.


@ 
<<echo=F>>=
options(oopt)
@ %def 

\end{document}
